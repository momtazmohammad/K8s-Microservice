telnet 172.20.5.111:1521
https://kubernetes.io/docs/concepts/overview/components/
Microservices vs. monolithic applications

loose coupling
sync vs async

docker
------
portable and not releated to os
docker desktop , wsl_update_x64
performance and security
//container got it's minimume requier os/kernel inside
install docker desktop for windows
https://docs.docker.com/reference/

docker pull ImageName

dockerfile for building image
docker build --tag testdocker:1.0 . //should set tag version otherwise it will be set to latest

create container
docker run -- generate container from the image  
docker run -d  -p 3230:3130 --name=dockertest  testdocker:1.0 
docker run -e MYSQL_ROOT_PASSWORD=12345 -d -p 3308:3306  --name=mysql8 mysql:latest
docker run -p 27018:27017 -d -e MONGO_INITDB_ROOT_USERNAME=admin -e MONGO_INITDB_ROOT_PASSWORD=12345 --name mongodb --net mongo-network mongo //the last parameter is image name
docker run -d -p 8081:8081 -e ME_CONFIG_MONGODB_ADMINUSERNAME=admin -e ME_CONFIG_MONGODB_ADMINPASSWORD=12345 -e ME_CONFIG_MONGODB_SERVER=mongodb --net mongo-network --name mongo-express mongo-express //the last parameter is image name and in ME_CONFIG_MONGODB_SERVER we specify mongodb container name
docker-compose  -f testdocker.yaml up -d	
docker-compose -f node-app-a.yaml down 

docker ps //list of containers
docker ps -f name=dockertest

docker exec -it 80a4a99f8bf4 sh
docker exec -it mysql bash
curl 127.0.0.1:4130

docker images
docker network create mongo-network
docker network ls
docker tag 4c60c47ec5e4 nodever18:1.0
docker logs ConatainerId
docker exec -it c35296fda438 bash or sh
env //cmd shows env variables in shell

volumes is used for data persistence 
services:
  web:
    build: ./web
...
    volumes:
      - ./web/:/acc
      - nodemodules:/acc/node_modules/ , name volumes
      - mongo-data:/data/db
    deploy:
      replicas: 2  , A replicated service is a Docker Swarm service that has a specified number of replicas running. These replicas consist of multiple instances of the specified Docker container. In our case, each replica will be a unique Redis instance

volumes:
  nodemodules:
  mongo-data:
    driver: local


kubernetes:
-----------
Kubernetes is a system for automating deployment, scaling, and management. In short, the entire orchestration of containerized applications.
docker desktop , minikube , kind ,kubeadm , containerd  , ...
https://kubernetes.io/docs/concepts/overview/components/
cluster , node , ...
kube-system name space

direct create pod: kubectl run testpod --image=testdocker:1.0
kubectl get all

kubectl port-forward pod/[pod-name] 8080:80 //8080 externalport 80 is internal
kubectl port-forward testpod 5000:3130

kubectl apply -f testpod.yaml //create or apply

difference between deployment and pod:
A deployment is responsible for keeping a set of pods running. 
A service is responsible for enabling network access to a set of pods.
We could use a deployment without a service to keep a set of identical pods running in the Kubernetes cluster. 
The deployment could be scaled up and down and pods could be replicated.

kubectl port-forward deployment/[deployment-name] 8080:80 

services is single point of one or more pods // pods ip addresses will be changed if pod is destroy and create a new one , so we can't rely on ip address
kubectl apply -f testsvc.yaml
kubectl port-forward service/[servie-name] 8080:80 

name in the service gets a DNS entry //eg. Frontend pod access backend pod using backend:port

deployment>service>replicaset>pod>container
pm2 start app.js -i max

kubectl apply -f testdepl.yaml
kubectl delete deployments  test-depl
zero downtime , terminiting old version and starting new one

kubectl scale deployment [depl-name] replicas=3
kubectl scale -f [yaml-file] --replicas=3 //same as mention in yaml file
autoscale by defining resources and limits

connecting to pod by service name (pod names and ip can be changed by deleting deployment and nodes)
service loadbalance between pods

serive types:
cluesterip:expose the service to cluster internal IP //default
nodeport:expose  the service to node port static ip
loadbalancer: provsion external ip to act as load balancer for the service
externalName:Maps a service to dns name

kubectl describe pods [pod-name]

kubectl exec -it testpod sh
kubectl exec [pod-name] -it sh
apk add curl
curl -s http://podIP:port // or serviceIP or servicename

kubectl logs testpod

Steps to build sample microservice project
------------------------------------------

docker build --tag  momtaz/auth:1-alpine .
kubectl apply -f namespace-depl.yaml
docker pull mongo
kubectl apply -f auth-mongo-depl.yaml
kubectl apply -f auth-depl.yaml
docker pull  rabbitmq:3.11.5-management-alpine
kubectl apply -f rabbitmq.yaml
docker build --tag  momtaz/order:1-alpine .
kubectl apply -f order-mongo-depl.yaml
kubectl apply -f order-depl.yaml
docker build --tag  momtaz/product:1-alpine .
kubectl apply -f product-mongo-depl.yaml
kubectl apply -f product-depl.yaml
kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.5.1/deploy/static/provider/cloud/deploy.yaml , // https://kubernetes.github.io/ingress-nginx/deploy/
kubectl wait --namespace ingress-nginx  --for=condition=ready pod   --selector=app.kubernetes.io/component=controller   --timeout=120s
kubectl apply -f ingress-svc.yaml
kubectl get pods -nsale
kubctl get ing -nsale
adding sale.com to C:\Windows\System32\drivers\etc
kubectl port-forward --namespace=ingress-nginx service/ingress-nginx-controller 8090:80
test project with postman


kubectl rollout restart deployment NAME

skaffold.dev/docs/install

https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/
kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.7.0/aio/deploy/recommended.yaml
kubectl apply -f dashboard-adminuser.yaml
kubectl apply -f ClusterRoleBinding.yaml
kubectl -n kubernetes-dashboard create token admin-user
kubectl proxy //give a token
Â http://localhost:8001/api/v1/namespaces/kubernetes-dashboard/services/https:kubernetes-dashboard:/proxy/.


docker pull mcr.microsoft.com/dotnet/sdk:5.0

https://linux.tosinso.com/fa/videos/8004/%D8%A8%D9%87%D8%AA%D8%B1%DB%8C%D9%86-%D8%AF%D9%88%D8%B1%D9%87-%D8%A2%D9%85%D9%88%D8%B2%D8%B4-%DA%A9%D9%88%D8%A8%D8%B1%D9%86%D8%AA%DB%8C%D8%B2-Kubernetes-%D8%B5%D9%81%D8%B1-%D8%AA%D8%A7-%D8%B5%D8%AF-plus-19-%D8%AF%D8%B1%D8%B3-%D8%B1%D8%A7%DB%8C%DA%AF%D8%A7%D9%86
 
docker scout cves testdocker:1.0